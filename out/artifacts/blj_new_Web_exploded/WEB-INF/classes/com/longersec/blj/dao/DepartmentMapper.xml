<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.longersec.blj.dao.DepartmentDao">
	<resultMap id="BaseResultMap" type="com.longersec.blj.domain.Department">
		<id column="id" jdbcType="INTEGER" property="id"/>
		<result column="name" jdbcType="VARCHAR" property="name"/>
		<result column="count" jdbcType="INTEGER" property="count"/>
		<result column="create_time" jdbcType="INTEGER" property="create_time"/>
		<result column="device_count" jdbcType="INTEGER" property="device_count"/>
		<result column="create_id" jdbcType="INTEGER" property="create_id"/>
		<result column="parent_id" jdbcType="INTEGER" property="parent_id"/>
		<result column="description" jdbcType="VARCHAR" property="description"/>
		<result column="parent_name" jdbcType="VARCHAR" property="parent_name"/>
	</resultMap>

	<resultMap id="BaseResultMap1" type="com.longersec.blj.domain.DTO.DepartDTO">
		<id column="id" jdbcType="INTEGER" property="id"/>
		<result column="text" jdbcType="VARCHAR" property="text"/>
<!--		<result column="count" jdbcType="INTEGER" property="count"/>
		<result column="device_count" jdbcType="INTEGER" property="device_count"/>-->
		<result column="parent_id" jdbcType="INTEGER" property="parent_id"/>
<!--		<result column="description" jdbcType="VARCHAR" property="description"/>-->
	</resultMap>

	<resultMap id="departmentRecordCounts" type="java.lang.Long">
		<result column="recordCounts" jdbcType="BIGINT"/>
	</resultMap>

	<resultMap id="DepartmentWithChildren" type="com.longersec.blj.domain.DTO.DepartDTO" extends="BaseResultMap1">
		<collection property="nodes" ofType="com.longersec.blj.domain.DTO.DepartDTO"
		            select="com.longersec.blj.dao.DepartmentDao.getAllDepartmentsByParentId" column="id"/>
	</resultMap>

	<select id="getAllDepartmentsByParentId" resultMap="DepartmentWithChildren">
	select id,name as text ,parent_id from lsblj_department where parent_id=#{id};
	</select>

	<insert id="addDepartment" parameterType="com.longersec.blj.domain.Department">
		INSERT INTO lsblj_department
		<set>
		
		<if test="name != null">`name`=#{name},</if>
		<if test="count != null">`count`=#{count},</if>
		<if test="device_count != null">`device_count`=#{device_count},</if>
		<if test="description != null">`description`=#{description},</if>
		<if test="create_time != null">`create_time`=#{create_time},</if>
		<if test="create_id != null">`create_id`=#{create_id},</if>
		<if test="parent_id != null">`parent_id`=#{parent_id},</if>
		</set>
	</insert>

	<update id="editDepartment" parameterType="com.longersec.blj.domain.Department">
		UPDATE lsblj_department
		<set>
		<if test="name != null">`name`=#{name},</if>
		<if test="count != null">`count`=#{count},</if>
		<if test="device_count != null">`device_count`=#{device_count},</if>
		<if test="description != null">`description`=#{description},</if>
		<if test="create_time != null">`create_time`=#{create_time},</if>
		<if test="create_id != null">`create_id`=#{create_id},</if>
		<if test="parent_id != null">`parent_id`=#{parent_id},</if>
		</set>
		where id=#{id}
	</update>

	<delete id="delDepartment" parameterType="java.util.List">
		DELETE FROM lsblj_department
		WHERE id IN (
		<foreach collection="list" item="item">
		#{item},
		</foreach>
		0)
	</delete>

	<select id="findAll" resultMap="BaseResultMap, departmentRecordCounts" resultType="java.lang.Object">
		SELECT 
		SQL_CALC_FOUND_ROWS 
		* FROM (SELECT * FROM lsblj_department ld,
		(SELECT @id :=#{id}) pd
		WHERE (FIND_IN_SET( parent_id, @id ) > 0 AND @id := CONCAT( @id, ',', id )) OR id = #{id}) T1
		WHERE 1 
		<if test="department.name != null"> AND `name` like CONCAT('%',#{department.name},'%')</if>
		<if test="department.searchAll != null">
			AND `name` like CONCAT('%',#{department.searchAll},'%')
		</if>
		<if test="page_start != null and page_length != null">
		LIMIT #{page_start},#{page_length}
		</if>
		;SELECT found_rows() AS recordCounts;
	</select>

	<select id="findIdName" resultType="com.longersec.blj.domain.DTO.DepartDTO">
		select id,name as text ,parent_id from
		(SELECT * FROM lsblj_department WHERE parent_id IS NOT NULL)
		rd,(SELECT @pid := #{depart_id}) pd
		where FIND_IN_SET( parent_id, @pid ) > 0 AND @pid := concat( @pid, ',', id );
	</select>

	<select id="selectByParentId" resultType="java.lang.Integer">
		select count(*) from lsblj_department where parent_id = #{item};
	</select>

	<select id="selectAll" resultType="com.longersec.blj.domain.Department">
		select * from lsblj_department;
	</select>

	<select id="selectById" resultType="java.lang.Integer">
		SELECT id  FROM
		(SELECT * FROM lsblj_department WHERE parent_id IS NOT NULL)
		rd,(SELECT @pid := #{depart_id}) pd
		where FIND_IN_SET( parent_id, @pid ) > 0 AND @pid := concat( @pid, ',', id );
	</select>

	<select id="findIdParent" resultType="com.longersec.blj.domain.DTO.DepartDTO">
		select id,name as text ,parent_id from lsblj_department where id = #{depart_id}
	</select>

	<select id="findName" resultType="java.lang.String">
		select `name`  from lsblj_department where id = #{id}
	</select>
	
	<insert id="insertMore">
		INSERT INTO lsblj_department
		<set>
			<if test="name != null">`name`=#{name},</if>
			<if test="description != null">`description`=#{description},</if>
			<if test="create_time != null">`create_time`=#{create_time},</if>
			<if test="parent_id != null">`parent_id`=#{parent_id},</if>
			<if test="create_id != null">`create_id`=#{create_id},</if>
		</set>
	</insert>

	<insert id="editMore">
		UPDATE lsblj_department
		<set>
			<if test="name != null">`name`=#{name},</if>
			<if test="description != null">`description`=#{description},</if>
			<if test="create_time != null">`create_time`=#{create_time},</if>
			<if test="parent_id != null">`parent_id`=#{parent_id},</if>
			<if test="create_id != null">`create_id`=#{create_id}</if>
		</set>
		    where id =#{id}
	</insert>

	<select id="findParentName" resultMap="BaseResultMap">
		SELECT rd.`name` AS `parent_name` FROM `lsblj_department` ld INNER JOIN lsblj_department rd ON ld.parent_id=rd.id WHERE ld.id=#{parent_id};
	</select>

	<update id="updateDepartmentCounts">
		UPDATE `lsblj_department` SET `count` = #{num} + `count` WHERE id = #{department};
	</update>

	<update id="updateDepartmentDeviceCount">
		UPDATE `lsblj_department` SET `device_count` = #{num} + `device_count` WHERE id = #{department};
	</update>

	<select id="selectParentId" resultType="com.longersec.blj.domain.Department" >
		SELECT `name`,`parent_id`,`count`,`device_count` FROM `lsblj_department` WHERE id = #{parent_id}
	</select>

	<select id="TopDepartmentIfExists" resultType="int">
		SELECT COUNT(*) FROM lsblj_department  WHERE `name` = #{parent_name};
	</select>

	<select id="selectUselessDepartments" resultType="int">
		SELECT COUNT(*) FROM `lsblj_department` WHERE parent_id NOT IN (SELECT id FROM `lsblj_department`) AND parent_id !=0;
	</select>

	<delete id="deleteUselessDepartments">
		DELETE FROM `lsblj_department` WHERE parent_id NOT IN (SELECT id FROM `lsblj_department`) AND parent_id !=0;
	</delete>

	<select id="findSubNodes" resultType="com.longersec.blj.domain.Department">
		SELECT id,`name`,parent_id,`count`,`device_count`,description FROM
			 `lsblj_department` ld,
			 (SELECT @id :=#{id}) pd
		WHERE (FIND_IN_SET( parent_id, @id ) > 0 AND @id := CONCAT( @id, ',', id )) OR id = #{id};
	</select>

	<select id="findTopNodes" resultType="com.longersec.blj.domain.Department">
		SELECT T2.id, T2.name ,T2.`parent_id`,T2.`count`, T2.`device_count`,description FROM (
		SELECT  @id AS dept_id, (SELECT @id := parent_id FROM lsblj_department WHERE id = dept_id) AS parent_id
		FROM   (SELECT @id := #{id}) vars,`lsblj_department` ld ) T1
		inner JOIN `lsblj_department` T2
		ON T1.dept_id = T2.id
	</select>

	<select id="findAllParentName" resultType="java.lang.String">
		SELECT T2.name FROM (
		 SELECT  @id AS dept_id, (SELECT @id := parent_id FROM lsblj_department WHERE id = dept_id) AS parent_id
		 FROM   (SELECT @id := #{id}) vars,`lsblj_department` ld ) T1
		 inner JOIN `lsblj_department` T2
		            ON T1.dept_id = T2.id
	</select>

	<select id="getById" resultMap="BaseResultMap">
		SELECT * FROM lsblj_department WHERE id =#{id};
	</select>

	<select id="selectByname" resultType="com.longersec.blj.domain.Department" >
		SELECT * FROM `lsblj_department` WHERE name = #{name}
	</select>

	<select id="selectIdByname" resultType="java.lang.Integer" >
		SELECT id FROM `lsblj_department` WHERE name = #{name}
	</select>


	<select id="selectUserId" resultType="java.lang.Integer">
		UPDATE lsblj_department SET `count` = 0 WHERE id IS NOT NULL;
		SELECT id FROM lsblj_user;
	</select>

	<select id="selectUserDepartment" resultType="java.lang.Integer">
		SELECT p.id FROM lsblj_department p LEFT JOIN lsblj_user u ON  u.department = p.id WHERE u.id=#{id}
	</select>

	<update id="updateDepartmentUserCounts">
		UPDATE lsblj_department
		SET `count` = `count` + 1
		WHERE id  IN (
		    <foreach collection="list" item="item">
			    #{item},
		    </foreach>
			0);
	</update>

	<select id="selectDeviceId" resultType="java.lang.Integer">
		UPDATE lsblj_department SET `device_count` = 0 WHERE id IS NOT NULL;
		SELECT id FROM lsblj_device;
	</select>

	<select id="selectDeviceDepartment" resultType="java.lang.Integer">
		SELECT p.id FROM lsblj_department p LEFT JOIN lsblj_device d ON  d.department = p.id WHERE d.id=#{id}
	</select>

	<update id="updateDepartmentDeviceCounts">
		UPDATE lsblj_department
		SET `device_count` = `device_count` + 1
		WHERE id  IN (
		<foreach collection="list" item="item">
			#{item},
		</foreach>
		0);
	</update>

	<select id="selectTopId" resultType="java.lang.Integer">
		SELECT id FROM lsblj_department ld,
		               (SELECT @id :=#{id}) pd
		WHERE (FIND_IN_SET( parent_id, @id ) > 0 AND @id := CONCAT( @id, ',', id )) OR id = #{id};
	</select>

	<select id="selectByNameAndParentId" resultMap="BaseResultMap">
		SELECT * FROM `lsblj_department` WHERE name = #{name} AND parent_id = #{parent_id};
	</select>

	<delete id="deleteUseless">
		DELETE  FROM `lsblj_access_policy` WHERE department= #{id};
		DELETE  FROM `lsblj_access_policy_user` WHERE policy_id NOT IN (SELECT id FROM lsblj_access_policy);
		DELETE  FROM `lsblj_access_policy_apppub_account` WHERE policy_id NOT IN (SELECT id FROM lsblj_access_policy);
		DELETE  FROM `lsblj_access_policy_device_account` WHERE policy_id NOT IN (SELECT id FROM lsblj_access_policy);
		DELETE  FROM `lsblj_access_policy_group` WHERE policy_id NOT IN (SELECT id FROM lsblj_access_policy);

		DELETE  FROM `lsblj_cmd_policy` WHERE department_id = #{id};
		DELETE  FROM `lsblj_cmd_policy_group` WHERE policy_id NOT IN (SELECT id FROM lsblj_cmd_policy);
		DELETE  FROM `lsblj_cmd_policy_device_account` WHERE policy_id NOT IN (SELECT id FROM lsblj_cmd_policy);
		DELETE  FROM `lsblj_cmd_policy_apppub` WHERE policy_id NOT IN (SELECT id FROM lsblj_cmd_policy);
		DELETE  FROM `lsblj_cmd_policy_cmdgroup` WHERE policy_id NOT IN (SELECT id FROM lsblj_cmd_policy);
		DELETE  FROM `lsblj_cmd_policy_user` WHERE policy_id NOT IN (SELECT id FROM lsblj_cmd_policy);

		DELETE  FROM `lsblj_cmdgroup` WHERE department = #{id};

		DELETE  FROM `lsblj_crontab_script_config` WHERE department = #{id};
		DELETE  FROM `lsblj_crontab_script_config_device` WHERE config_id NOT IN (SELECT id FROM lsblj_crontab_script_config);
		DELETE  FROM `lsblj_crontab_script_config_group` WHERE config_id NOT IN (SELECT id FROM lsblj_crontab_script_config);
	</delete>
</mapper>
