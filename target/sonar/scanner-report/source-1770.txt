package com.longersec.blj.web;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import com.longersec.blj.dao.DeviceDao;
import com.longersec.blj.dao.UserDao;
import com.longersec.blj.domain.DTO.Users;
import com.longersec.blj.domain.Device;
import com.longersec.blj.service.*;
import org.apache.commons.collections.CollectionUtils;
import org.apache.shiro.SecurityUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import com.longersec.blj.domain.Group;
import com.longersec.blj.domain.OperatorLog;
import com.longersec.blj.domain.User;
import com.longersec.blj.utils.Operator_log;
import com.longersec.blj.utils.Validator;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;


/**
 * 
 */
@Controller
@RequestMapping(value = "/group")
public class GroupController {

	@Autowired
	private GroupService groupService;
	@Autowired
	private OperatorLogService operatorLogService;
	@Autowired
	private UserDao userDao;
	@Autowired
	private DeviceDao deviceDao;
	@Autowired
	private DepartmentService departmentService;
	@Autowired
	private UserService userService;
	@Autowired
	private DeviceService deviceService;

	
	@RequestMapping("/listGroup")
	@ResponseBody
	public JSONObject listGroup(Group group, HttpServletRequest request, HttpSession session) {
		int page_start = Integer.parseInt(request.getParameter("start"));
		int page_length = Integer.parseInt(request.getParameter("length"));
		User p_user = (User) SecurityUtils.getSubject().getPrincipal();
		List<Integer> depart_ids = new ArrayList<>();
		if (p_user.getRole_id().equals(5)){
			//获取所在的部门
			int depart_id = p_user.getDepartment();
			depart_ids = departmentService.selectById(depart_id);
			depart_ids.add(p_user.getDepartment());
		}
		ArrayList<Object> resultGroups = new ArrayList<Object>();
		ArrayList<Group> groups = new ArrayList<Group>();
		long total = 0;
		if(group.getSearchAll()!=null&&group.getSearchAll().equals("")) group.setSearchAll(null);
		resultGroups = (ArrayList<Object>)groupService.findAll(group, page_start, page_length,depart_ids);
		if(CollectionUtils.isNotEmpty(resultGroups)) {
			groups = (ArrayList<Group>)resultGroups.get(0);
			total = ((ArrayList<Long>) resultGroups.get(1)).get(0);
		}

		JSONArray jsonArray = JSONArray.fromObject(groups);
		JSONObject result = new JSONObject();
		result.accumulate("success", true);
		result.accumulate("recordsTotal", total);
		result.accumulate("recordsFiltered", total);
		result.accumulate("data", jsonArray);
		return result;
	}

	@RequestMapping("/listByType")
	@ResponseBody
	public JSONObject listByType(Group group){
		ArrayList<Group> groups = new ArrayList<Group>();
		groups = groupService.listByType(group.getType());
		JSONArray jsonArray = JSONArray.fromObject(groups);
		JSONObject result = new JSONObject();
		result.accumulate("success", true);
		result.accumulate("data", jsonArray);
		return result;
	}

	@RequestMapping("/editGroup")
	@ResponseBody
	public JSONObject editGroup(@Validated Group group,BindingResult errorResult, @RequestParam("type")Integer type,HttpServletRequest request, HttpSession session) {
		JSONObject result = new JSONObject();
		OperatorLog operatorLog = null;
		User user = (User) SecurityUtils.getSubject().getPrincipal();
		group.setCreate_time((int) System.currentTimeMillis());
		group.setCreator_id(user.getId());
		if (type==1) {
	        //操作日志
			operatorLog =Operator_log.log(request, session);
			operatorLog.setModule("设备组");		
		}else {	
	        //操作日志
			operatorLog =Operator_log.log(request, session);
			operatorLog.setModule("用户组");			
		}
		Boolean r = false;
		if (group.getId()!=null) {
			if (type==1) {
				operatorLog.setDetails("编辑设备组["+group.getName()+"]");
			}else {
				operatorLog.setDetails("编辑用户组["+group.getName()+"]");
			}
			operatorLog.setContent("编辑");
			Map<String, Object> resultMap = Validator.fieldValidate(errorResult);
			String name = group.getName();
			Group groupname = groupService.checkname(group);
			//数据错误
			if (groupname != null && !groupname.getId().equals(group.getId())) {
				result.accumulate("error", "组名重复");
			}else {
				groupname =null;
				result.accumulate("error", "");
			}
			if (resultMap != null) {
				result.accumulate("errorMessage", resultMap);
			}else {
				result.accumulate("errorMessage", "");
			}
			//数据正确
			if (resultMap==null && groupname==null) {
				r = groupService.editGroup(group);
				if (r) {
					result.accumulate("success", true);
					result.accumulate("win", "编辑成功");
					operatorLog.setResult("成功");
					operatorLogService.addOperatorLog(operatorLog);
				}else {
					result.put("success",false);
					result.put("false", "编辑失败");
					operatorLog.setResult("失败");
					operatorLogService.addOperatorLog(operatorLog);
				}
			}else {
				result.put("success", false);
				operatorLog.setResult("失败");
				operatorLogService.addOperatorLog(operatorLog);
			}
		}else {
//			group.setDepartment(user.getDepartment());
			if (type==1) {
				operatorLog.setDetails("增加设备组["+group.getName()+"]");
			}else {
				operatorLog.setDetails("增加用户组["+group.getName()+"]");
			}
			operatorLog.setContent("添加");
			Map<String, Object> resultMap = Validator.fieldValidate(errorResult);
			String name = group.getName();
			Group groupname = groupService.checkname(group);
			System.out.println(groupname);
			//数据错误
			if (groupname != null) {
				result.accumulate("error", "组名重复");
			}else {
				result.accumulate("error", "");
			}
			if (resultMap != null) {
				result.accumulate("errorMessage", resultMap);
			}else {
				result.accumulate("errorMessage", "");
			}
			//数据正确
			if (resultMap==null&&groupname==null) {
				group.setCount(0);
				r = groupService.addGroup(group);
				if (r) {
					result.accumulate("success", true);
					result.accumulate("win", "添加成功");
					operatorLog.setResult("成功");
					operatorLogService.addOperatorLog(operatorLog);
				}
			}else {
				result.accumulate("success", false);
				operatorLog.setResult("失败");
				operatorLogService.addOperatorLog(operatorLog);	
			}
		}
		return result;
	}

	@RequestMapping("/delGroup")
	@ResponseBody
	public JSONObject delGroup(@RequestParam(value = "ids[]") Integer[] ids,@RequestParam(value = "type") Integer type, HttpServletRequest request, HttpSession session) {
		JSONObject result = new JSONObject();
		List<Integer> _ids =  Arrays.asList(ids);
		result.accumulate("success", true);
		if(_ids.isEmpty()) {
			result.put("success", false);
			result.put("msg", "id不能为空");
		}
		
        //操作日志
		OperatorLog operatorLog =Operator_log.log(request, session);
		operatorLog.setContent("删除");
		String groups = "";
		if (type==0){
			operatorLog.setModule("用户组");
			for (Integer _id : ids){
				groups += groupService.selectById(_id, type)+",";
				int counts = userDao.getCounts(_id);
				if (counts!=0){
					result.put("msg", "请删除组下用户");
					result.put("success", false);
					break;
				}
			}
			operatorLog.setDetails("删除用户组["+groups.substring(0,groups.length()-1)+"]");
		}else {
			operatorLog.setModule("设备组");
			for (Integer _id : ids){
				groups += groupService.selectById(_id, type)+",";
				int counts = deviceDao.getCounts(_id);
				if (counts!=0){
					result.put("msg", "请删除组下设备");
					result.put("success", false);
					break;
				}
			}
			operatorLog.setDetails("删除设备组["+groups.substring(0,groups.length()-1)+"]");
		}
		//是否操作成功
		if(result.getBoolean("success")) {
			operatorLog.setResult("成功");
			operatorLogService.addOperatorLog(operatorLog);
			Boolean r = groupService.delGroup(_ids);
			result.put("success", r);
		}  else {
			operatorLog.setResult("失败");
			operatorLogService.addOperatorLog(operatorLog);
		}
		return result;
	}

	@RequestMapping("/checkname")
	@ResponseBody
	public JSONObject checkname(@RequestParam(value = "name") String name,@RequestParam(value = "type") Integer type,@RequestParam(value = "id" ,required = false)Integer id){
		JSONObject result = new JSONObject();
		Group group = new Group();
		group.setType(type);
		group.setName(name);
		result.put("success", true);
		if (id==null){
			result.put("success", false);
		}
		if (!result.getBoolean("success")){
			Group _group = groupService.checkname(group);
			if (_group==null){
				result.put("success", true);
			}else {
				result.put("success", false);
			}
		}else {
			Group _group = groupService.checkname(group);
			if (_group==null){
				result.put("success", true);
			}else {
				if (_group.getId().equals(id)){
					result.put("success", true);
				}else {
					result.put("success", false);
				}
			}
		}

		return result;
	}

	@RequestMapping("/finduserGroup")
	@ResponseBody
	public JSONObject finduserGroup(@RequestParam("pid") Integer pid ,@RequestParam("type")Integer type){

		ArrayList<Users> data_users = new ArrayList<Users>();
		ArrayList<Users> data_p_users = new ArrayList<Users>();
		JSONArray jsonArray = null;
		JSONArray jsonArray1 = null;
		if (type==0){
			data_users = userService.finduserGroup(0);
			data_p_users = userService.finduserGroup(pid);
			jsonArray = JSONArray.fromObject(data_users);
			jsonArray1 = JSONArray.fromObject(data_p_users);
		}else if (type==1){
			ArrayList<Device> data_devices = deviceService.findDeviceGroup(0);
			ArrayList<Device> data_p_devices = deviceService.findDeviceGroup(pid);
			jsonArray = JSONArray.fromObject(data_devices);
			jsonArray1 = JSONArray.fromObject(data_p_devices);
		}


		JSONObject result = new JSONObject();
		result.accumulate("success", true);
		result.accumulate("data", jsonArray);
		result.accumulate("data_p", jsonArray1);
		return result;
	}

}
