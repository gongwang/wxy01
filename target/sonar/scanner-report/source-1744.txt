package com.longersec.blj.web;
import com.longersec.blj.utils.Validator;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import org.apache.commons.collections.CollectionUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import com.longersec.blj.domain.ConfigLog;
import com.longersec.blj.service.ConfigLogService;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
    /**
     *
     */
    @Controller
    @RequestMapping(value = "/configLog")
    public class ConfigLogController{
        @Autowired
        private ConfigLogService configLogService;

        @RequestMapping("/listConfigLog")
        @ResponseBody
        public JSONObject listConfigLog(ConfigLog configLog, HttpServletRequest request, HttpSession session) {
            int page_start = Integer.parseInt(request.getParameter("start"));
            int page_length = Integer.parseInt(request.getParameter("length"));
            ArrayList<Object> resultConfigLogs = new ArrayList<Object>();
            ArrayList<ConfigLog> configLogs = new ArrayList<ConfigLog>();
            long total = 0;
            resultConfigLogs = (ArrayList<Object>)configLogService.findAll(configLog, page_start, page_length);
            if(CollectionUtils.isNotEmpty(resultConfigLogs)) {
                configLogs = (ArrayList<ConfigLog>)resultConfigLogs.get(0);
                total = ((ArrayList<Long>) resultConfigLogs.get(1)).get(0);
            }
            JSONArray jsonArray = JSONArray.fromObject(configLogs);
            JSONObject result = new JSONObject();
            result.accumulate("success", true);
            result.accumulate("recordsTotal", total);
            result.accumulate("recordsFiltered", total);
            result.accumulate("data", jsonArray);
            return result;
        }

        @RequestMapping("/addConfigLog")
        @ResponseBody
        public JSONObject addConfigLog(@Validated ConfigLog configLog, BindingResult errorResult, HttpServletRequest request, HttpSession session) {
            JSONObject result = new JSONObject();
            Map<String, Object> resultMap = Validator.fieldValidate(errorResult);
            if(resultMap!=null) {
                result.put("msg", resultMap);
                result.put("success",false);
                return result;
            }
            Boolean r = configLogService.addConfigLog(configLog);
            result.accumulate("success", r);
            return result;
        }

        @RequestMapping("/editConfigLog")
        @ResponseBody
        public JSONObject editConfigLog(@Validated ConfigLog configLog,BindingResult errorResult,HttpServletRequest request, HttpSession session) {
            JSONObject result = new JSONObject();
            Map<String, Object> resultMap = Validator.fieldValidate(errorResult);
            result.accumulate("success", true);
            if(resultMap!=null) {
                result.put("msg", resultMap);
                result.put("success",false);
                return result;
            }
            if(result.getBoolean("success")) {
                Boolean r = configLogService.editConfigLog(configLog);
                result.accumulate("success", r?true:false);
            }
            return result;
        }

        @RequestMapping("/delConfigLog")
        @ResponseBody
        public JSONObject delConfigLog(@RequestParam(value = "ids[]") Integer[] ids, HttpServletRequest request, HttpSession session) {
            JSONObject result = new JSONObject();
            List<Integer> _ids =  Arrays.asList(ids);
            if(_ids.isEmpty()) {
                result.accumulate("success", false);
                result.accumulate("msg", "id涓嶈兘涓虹┖");
            }
            Boolean r = configLogService.delConfigLog(_ids);
            result.put("success", r);
            return result;
        }
    }

